{"version":3,"sources":["store/defaultJsonOptions.js","store/defaultEditorOptions.js","store/store.js","canvasRenderer.js","components/CanvasComponent.js","helper/textTemplate.js","components/EditorTextComponent.js","components/IdeComponent.js","components/ColorPropertyComponent.js","helper/renderer.js","components/GeneralElementsComponent.js","components/FontTypePropertyComponent.js","components/EditorElementsComponent.js","helper/generateZip.js","components/CreatePluginComponent.js","components/App.js","serviceWorker.js","index.js"],"names":["formattedOptions","k","defaultOptions","hasOwnProperty","getFlattenProperties","obj","prefix","result","key","value","flattenProperties","Object","assign","keys","starProperties","length","freezeRecursively","freeze","defaultEditorOptions","TEXT","FOREGROUND","BACKGROUND","NAME","DEFAULT_KEYWORD","DEFAULT_STRING","DEFAULT_LINE_COMMENT","shadowCopy","state","createStore","jsonOptions","defaultJsonOptions","xmlOptions","loading","action","update","type","parse","JSON","stringify","newOptions","group","name","console","log","fontType","LAYERS_ORDER","defaultState","sort","a","b","aIsForeground","toLowerCase","includes","bIsForeground","updateColor","prevColor","newColor","newAlpha","Math","min","CanvasRenderer","width","height","this","loaded","masks","offscreenCanvas","OffscreenCanvas","img","Image","addEventListener","context","getContext","drawImage","data","getImageData","imageArray","Uint8ClampedArray","x","y","i","updateStateIfPossible","src","layerCanvas","frontLayer","store","dispatch","ctx","mask","indexOfFirstDot","indexOf","color","substr","i4","parseInt","imgData","ImageData","createImageBitmap","then","imgBitmap","CanvasComponent","props","containerWidth","containerHeight","canvasRenderer","updateCanvas","canvas","refs","style","render","className","ref","React","Component","RCanvasComponent","connect","getTextStyle","editorOptions","option","styles","FONT_TYPE","EditorTextComponent","template","defaultTextBackground","getBackgroundColor","keywordStyle","lineComment","defaultText","stringLiteral","textTemplate","dangerouslySetInnerHTML","__html","REditorTextComponent","IdeComponent","RIdeComponent","mapDispatchToProps","nameAndValue","updateType","popover","position","zIndex","cover","top","right","bottom","left","ColorPropertyComponent","updateValue","e","preventDefault","target","newState","fireStateUpdate","setState","setTimeout","handleClick","displayColorPicker","handlePickerChange","hex","toUpperCase","substring","handleClose","resetOption","schemaDefaultValue","colorId","title","picker","onMouseUp","onChangeComplete","onClick","onChange","href","RColorPropertyComponent","RXmlColorPropertyComponent","renderAccordionElement","uniqueId","groupName","subElements","accordionId","id","data-toggle","data-target","aria-expanded","aria-controls","aria-labelledby","data-parent","GeneralElementsComponent","resultGroups","sortedKeys","count","groupKey","subObject","subKeys","subCount","propertyKey","defaultValue","push","RGeneralElementsComponent","FontTypePropertyComponent","checked","undefined","RFontTypePropertyComponent","EditorElementsComponent","elements","REditorElementsComponent","uuid","require","EDITOR_SCHEMA_NAME","MY_THEME_FILE","generateZip","pluginName","author","topLevelZip","JSZip","metaInf","folder","file","generateManifestMF","pluginId","description","uuidValue","content","generatePluginXml","dark","editorScheme","uiOptions","ui","s","generateThemeJson","themes","generateAttribute","generateEditorScheme","generateAsync","saveAs","values","startsWith","CreatePluginComponent","onSubmit","getState","htmlFor","App","defaultActiveKey","eventKey","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dfdfea7e.chunk.js","sourcesContent":["import defaultOptions from '../data/darcula-default-meaningful.json'\nimport starProperties from '../data/starProperties.json'\n\nconst formattedOptions = {};\nfor (let k in defaultOptions) {\n    if (defaultOptions.hasOwnProperty(k)) {\n        formattedOptions[k] = getFlattenProperties(defaultOptions[k], \"\");\n    }\n}\n\nif (Object.keys(starProperties).length > 0) {\n    formattedOptions[\"*\"] = getFlattenProperties(starProperties, \"\");\n}\n\nexport function getFlattenProperties(obj, prefix) {\n    let result = {};\n    if (prefix) prefix = prefix + \".\";\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key)) continue;\n\n        let value = obj[key];\n        if (typeof value !== \"object\") {\n            result[prefix + key] = value;\n            continue;\n        }\n\n        let flattenProperties = getFlattenProperties(value, prefix + key);\n        result = Object.assign(result, flattenProperties);\n    }\n\n    return result;\n}\n\nfunction freezeRecursively(obj) {\n    Object.freeze(obj);\n    for (let k in obj) {\n        if (typeof obj == \"object\" && obj.hasOwnProperty(k)) {\n            freezeRecursively(obj[k]);\n        }\n    }\n}\n\nfreezeRecursively(formattedOptions);\n\nexport default formattedOptions;\n","const defaultEditorOptions = {\n    TEXT: {\n        FOREGROUND: \"#a9b7c6\",\n        BACKGROUND: \"#2b2b2b\",\n        NAME: \"Text\"\n    },\n    DEFAULT_KEYWORD: {\n        FOREGROUND: \"#cc7832\",\n        NAME: \"Keywords\"\n    },\n    DEFAULT_STRING: {\n        FOREGROUND: \"#6a8759\",\n        NAME: \"String literals\"\n    },\n    DEFAULT_LINE_COMMENT: {\n        FOREGROUND: \"#808080\",\n        NAME: \"Line comment\"\n    }\n};\n//test\n\nexport default defaultEditorOptions;","import {createStore} from 'redux'\nimport defaultJsonOptions from \"./defaultJsonOptions\";\nimport defaultEditorOptions from \"./defaultEditorOptions\";\n\nfunction updateProperty(state = {\n    jsonOptions: defaultJsonOptions,\n    xmlOptions: defaultEditorOptions,\n    loading: true\n}, action) {\n    let update = action.update;\n\n    if (action.type === \"reload\") {\n        let parse = JSON.parse(JSON.stringify(state));\n        parse.loading = false;\n        return parse;\n    }\n\n    if (action.type === \"json\") {\n        if (update && update.value.length <= 6) {\n            const newOptions = shadowCopy(state.jsonOptions);\n            newOptions[update.group][update.name] = \"#\" + update.value;\n            return {jsonOptions: newOptions, xmlOptions: state.xmlOptions, loading: state.loading}\n        }\n    } else if (action.type === \"xml\") {\n        if (update) {\n            if (update.value && update.value.length === 6) {\n                const newOptions = shadowCopy(state.xmlOptions);\n                newOptions[update.group][update.name] = \"#\" + update.value;\n                console.log(\"state updated \" + update.name + \" \" + update.value);\n                return {xmlOptions: newOptions, jsonOptions: state.jsonOptions, loading: state.loading}\n            } else if (update.name === \"FONT_TYPE\") {\n                const newOptions = shadowCopy(state.xmlOptions);\n                newOptions[update.group][update.name] = update.fontType;\n                return {xmlOptions: newOptions, jsonOptions: state.jsonOptions, loading: state.loading}\n            }\n        }\n    }\n    return state;\n}\n\n\nfunction shadowCopy(state) {\n    let result = {};\n    return Object.assign(result, state);\n}\n\n\nexport default createStore(updateProperty);\n","import defaultState, {getFlattenProperties} from \"./store/defaultJsonOptions\";\nimport store from \"./store/store\";\n\nconst LAYERS_ORDER = Object.keys(getFlattenProperties(defaultState, \"\")).sort((a, b) => {\n    let aIsForeground = a.toLowerCase().includes(\"foreground\");\n    let bIsForeground = b.toLowerCase().includes(\"foreground\");\n    if (aIsForeground && !bIsForeground) return 1;\n    if (!aIsForeground && bIsForeground) return -1;\n    return a < b ? -1 :\n           a > b ? 1 :\n           0;\n});\n\nfunction updateColor(prevColor, newColor, newAlpha) {\n    if (newAlpha === 255) return newColor;\n    return Math.min((prevColor * (255 - newAlpha) + newColor * newAlpha) / 255, 255);\n}\n\n\nclass CanvasRenderer {\n\n    constructor(width, height) {\n        this.width = width;\n        this.height = height;\n        this.loaded = 1;\n\n        const masks = {};\n        for (let key of LAYERS_ORDER) {\n            this.loaded++;\n            let offscreenCanvas = new OffscreenCanvas(width, height);\n            let img = new Image();\n            img.addEventListener(\"load\", () => {\n                let context = offscreenCanvas.getContext(\"2d\");\n                context.drawImage(img, 0, 0);\n                let data = context.getImageData(0, 0, width, height).data;\n                let imageArray = new Uint8ClampedArray(this.width * this.height);\n                for (let x = 0; x < this.width; x++) {\n                    for (let y = 0; y < this.height; y++) {\n                        let i = y * this.width + x;\n                        imageArray[i] = 255 - data[i * 4];\n                    }\n                }\n                masks[key] = imageArray;\n                this.updateStateIfPossible();\n            }, false);\n            img.src = 'canvas-data/' + key + \".png\";\n        }\n        /** @type {Object<String, Uint8ClampedArray>} */\n        this.layerCanvas = masks;\n\n        let frontLayer = new Image();\n        frontLayer.addEventListener(\"load\", () => {\n            this.frontLayer = frontLayer;\n            this.updateStateIfPossible();\n        }, false);\n        frontLayer.src = 'canvas-data/FrontLayer.png';\n    }\n\n    updateStateIfPossible() {\n        this.loaded--;\n        if (this.loaded === 0) {\n            store.dispatch({type: \"reload\"})\n        }\n    }\n\n    /**\n     * @param {CanvasRenderingContext2D} ctx\n     * @param state\n     */\n    render(ctx, state) {\n        let imageArray = new Uint8ClampedArray(this.width * this.height * 4);\n\n        for (let key of LAYERS_ORDER) {\n            let mask = this.layerCanvas[key];\n            if (!mask) continue;\n\n            let indexOfFirstDot = key.indexOf(\".\");\n            let color = state[key.substr(0, indexOfFirstDot)][key.substr(indexOfFirstDot + 1)];\n\n            for (let x = 0; x < this.width; x++) {\n                for (let y = 0; y < this.height; y++) {\n                    let i = y * this.width + x;\n                    if (mask[i] > 0) {\n                        let i4 = i * 4;\n                        imageArray[i4] = updateColor(imageArray[i4], parseInt(color.substr(1, 2), 16), mask[i]);\n                        imageArray[i4 + 1] = updateColor(imageArray[i4 + 1], parseInt(color.substr(3, 2), 16), mask[i]);\n                        imageArray[i4 + 2] = updateColor(imageArray[i4 + 2], parseInt(color.substr(5, 2), 16), mask[i]);\n                        imageArray[i4 + 3] = 255;\n                    }\n                }\n            }\n        }\n\n        let imgData = new ImageData(imageArray, this.width, this.height);\n\n        createImageBitmap(imgData).then(imgBitmap => {\n            ctx.drawImage(imgBitmap, 0, 0);\n            if (this.frontLayer) {\n                ctx.drawImage(this.frontLayer, 0, 0);\n            }\n        });\n    }\n}\n\n\nfunction getProperty(state, property) {\n    let split = property.split(\".\");\n    let optionsProperty = getValueBySplitQName(state, split);\n    let defaultProperty = getValueBySplitQName(defaultState, split);\n    if (optionsProperty !== defaultProperty) return optionsProperty;\n\n    let optionsStarProperty = state[\"*\"][split[split.length - 1]];\n    if (optionsStarProperty) return optionsStarProperty;\n\n    return defaultProperty;\n}\n\nfunction getValueBySplitQName(options, split) {\n    let value = options;\n    for (let part of split) {\n        value = value[part];\n    }\n    return value;\n}\n\nexport default CanvasRenderer;\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport CanvasRenderer from \"../canvasRenderer\";\n\n\nconst mapStateToProps = state => {\n    return {jsonOptions: state.jsonOptions};\n};\n\nclass CanvasComponent extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.containerWidth = 973;\n        this.containerHeight = 623;\n        this.canvasRenderer = new CanvasRenderer(this.containerWidth * 2, this.containerHeight * 2)\n    }\n\n    componentDidMount() {\n        this.updateCanvas();\n    }\n\n    componentDidUpdate() {\n        this.updateCanvas();\n    }\n\n    updateCanvas() {\n        let canvas = this.refs.canvas;\n        canvas.style.width = this.containerWidth + \"px\";\n        canvas.style.height = this.containerHeight + \"px\";\n        const ctx = canvas.getContext('2d');\n        this.canvasRenderer.render(ctx, this.props.jsonOptions);\n    }\n\n    render() {\n        return (<div>\n            <canvas className=\"canvas-ide-component\" width={this.containerWidth * 2} height={this.containerHeight * 2}\n                    ref=\"canvas\"/>\n        </div>);\n    }\n}\n\n\nconst RCanvasComponent = connect(mapStateToProps)(CanvasComponent);\n\nexport {RCanvasComponent as CanvasComponent}","import React from 'react'\n\nexport default function (editorOptions) {\n    \n    const defaultTextBackground = `background-color: ${getBackgroundColor(editorOptions)}; font-family:'Menlo Regular';font-weight:normal;font-size:14px;line-height:1.5;`;\n    const keywordStyle = getTextStyle(editorOptions, \"DEFAULT_KEYWORD\");\n    const lineComment = getTextStyle(editorOptions, \"DEFAULT_LINE_COMMENT\");\n    const defaultText = getTextStyle(editorOptions, \"TEXT\");\n    const stringLiteral = getTextStyle(editorOptions, \"DEFAULT_STRING\");\n    return `\n<div id=\"editor\" style=\"${defaultTextBackground}\">\n<pre><span style=\"${keywordStyle}\">package </span><span style=\"${defaultText}\">com.company</span><span class=\"s0\">;</span>\n<span style=\"${keywordStyle}\">public class </span><span style=\"${defaultText}\">Main {</span>\n        <span style=\"${keywordStyle}\">public static void </span><span style=\"${defaultText}\">main(String[] args) {</span>\n            <span style=\"${lineComment}\">// write your code here</span>\n            <span style=\"${defaultText}\">System.out.println(</span><span style=\"${stringLiteral}\">&quot;Hello&quot;</span><span\n        style=\"${defaultText}\">)</span><span style=\"${keywordStyle}\">;</span>\n        <span style=\"${defaultText}\">}</span>\n<span style=\"${defaultText}\">}</span>\n</pre>\n</div>`\n}\n\nfunction getBackgroundColor(editorOptions) {\n    return editorOptions.TEXT.BACKGROUND || \"#000000\";\n}\n\nfunction getTextStyle(editorOptions, option) {\n    let styles = editorOptions[option];\n\n    let result = `color:${styles.FOREGROUND || \"#FFFFFF\"};`;\n    if (styles.FONT_TYPE != null) {\n        if (styles.FONT_TYPE === \"1\") {\n            result += \"font-weight: bold;\"\n        }\n    }\n    if (styles.BACKGROUND) {\n        result += `background-color: ${styles.BACKGROUND};`\n    }\n    return result;\n}","import React from 'react';\nimport {connect} from \"react-redux\";\nimport textTemplate from \"../helper/textTemplate\";\n\n\nconst mapStateToProps = state => {\n    return {xmlOptions: state.xmlOptions};\n};\n\nclass EditorTextComponent extends React.Component {\n\n    render() {\n        let template = textTemplate(this.props.xmlOptions);\n\n        return <div dangerouslySetInnerHTML={{__html: template}}/>;\n    }\n}\n\n\nconst REditorTextComponent = connect(mapStateToProps)(EditorTextComponent);\n\nexport {REditorTextComponent as EditorTextComponent}","import React from 'react';\nimport {CanvasComponent} from \"./CanvasComponent\";\nimport {EditorTextComponent} from \"./EditorTextComponent\";\nimport {connect} from \"react-redux\";\n\nconst mapStateToProps = state => {\n    return {loading: state.loading};\n};\n\nclass IdeComponent extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n    }\n\n    render() {\n        return (<div className={\"col-9 canvas-container\" + (this.props.loading ? \" loading\" : \"\")}>\n            <EditorTextComponent/>\n            <CanvasComponent/>\n        </div>);\n    }\n}\n\nconst RIdeComponent = connect(mapStateToProps)(IdeComponent);\n\nexport {RIdeComponent as IdeComponent}\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {ChromePicker} from 'react-color'\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        update: nameAndValue => {\n            dispatch({update: nameAndValue, type: nameAndValue.updateType})\n        }\n    };\n}\n\nconst mapJsonStateToProps = state => {\n    return {xmlOptions: state.xmlOptions};\n};\n\nconst mapXmlStateToProps = state => {\n    return {jsonOptions: state.jsonOptions};\n};\n\nconst popover = {\n    position: 'absolute',\n    zIndex: '1000',\n};\nconst cover = {\n    position: 'fixed',\n    top: '0px',\n    right: '0px',\n    bottom: '0px',\n    left: '0px',\n};\n\nclass ColorPropertyComponent extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.colorId = props.colorId;\n        this.name = props.name;\n        this.schemaDefaultValue = props.schemaDefaultValue == null ? null : props.schemaDefaultValue.substring(1);\n        this.title = props.title || this.name;\n        this.group = props.group;\n        this.updateType = props.updateType;\n        let value = typeof props.colorId == \"string\" ? props.colorId.substring(1) : \"\";\n        this.state = {\n            value: value\n        };\n    }\n\n    updateValue = (e) => {\n        e.preventDefault();\n        let value = e.target.value;\n        if (value !== this.state.value) {\n            const newState = {\n                value: value\n            };\n            this.fireStateUpdate(newState);\n        }\n    };\n\n    fireStateUpdate = (newState) => {\n        this.setState(newState);\n        \n        //send latter, for avoiding blocking UI / Updates\n        setTimeout(() => {\n            this.props.update({\n                name: this.name,\n                value: newState.value,\n                group: this.group,\n                updateType: this.updateType\n            });\n        })\n\n    };\n\n    handleClick = () => {\n        const newState = {\n            value: this.state.value,\n            displayColorPicker: true\n        };\n        this.setState(newState);\n    };\n\n    handlePickerChange = (color) => {\n        if (color.hex == null) return;\n        let value = color.hex.toUpperCase().substring(1);\n        const newState = {\n            value: value\n        };\n\n        this.fireStateUpdate(newState, false);\n    };\n\n    handleClose = () => {\n        const newState = {\n            value: this.state.value,\n            displayColorPicker: false\n        };\n        this.fireStateUpdate(newState, false);\n    };\n\n    resetOption = () => {\n        const newState = {\n            value: this.schemaDefaultValue\n        };\n        this.fireStateUpdate(newState);\n    }\n\n    render() {\n        let value = \"#\" + this.state.value;\n\n        let picker = this.state.displayColorPicker\n            ? <div style={popover}>\n                <div onMouseUp={this.handleClose} style={cover}/>\n                <ChromePicker\n                    color={value}\n                    // onChange={this.handleChange}\n                    onChangeComplete={this.handlePickerChange}\n                />\n            </div>\n            : null;\n\n        let style = {\"backgroundColor\": value, \"borderColor\": value};\n        return (\n            <div>\n                <small className=\"form-text text-dark\">{this.title}</small>\n                <div className=\"input-group color-picker\">\n                    <div className=\"input-group-prepend\">\n                        <button onClick={this.handleClick} className=\"btn\" type=\"button\"\n                                style={style}>\n                            {picker}\n                        </button>\n                    </div>\n\n                    <input type=\"text\" className=\"form-control form-control-sm color-property\"\n                           value={this.state.value}\n                           onChange={this.updateValue}/>\n                    {this.schemaDefaultValue == null || (this.state.value === this.schemaDefaultValue) ? null : <a onClick={this.resetOption} href=\"#\"><small>revert</small></a>}\n\n                </div>\n            </div>\n        )\n    }\n}\n\nconst RColorPropertyComponent = connect(mapJsonStateToProps, mapDispatchToProps)(ColorPropertyComponent);\nconst RXmlColorPropertyComponent = connect(mapXmlStateToProps, mapDispatchToProps)(ColorPropertyComponent);\n\nexport {RColorPropertyComponent as ColorPropertyComponent, RXmlColorPropertyComponent as XmlColorPropertyComponent}\n","import React from \"react\";\n\nexport function renderAccordionElement(uniqueId, groupName, subElements, accordionId) {\n    return <div key={\"group\" + accordionId + uniqueId} className=\"card\">\n        <div className=\"card-header\" id={\"heading\" + accordionId + uniqueId}>\n            <button className=\"btn btn-block text-left collapsed\" data-toggle=\"collapse\"\n                    data-target={\"#collapse\" + accordionId + uniqueId}\n                    aria-expanded=\"false\" aria-controls={\"collapse\" + accordionId + uniqueId}>\n                {groupName}\n                <span className=\"oi oi-chevron-bottom float-right\"/>\n            </button>\n        </div>\n\n        <div id={\"collapse\" + accordionId + uniqueId}\n             className=\"collapse\" aria-labelledby={\"heading\" + accordionId + uniqueId}\n             data-parent={\"#\" + accordionId}>\n            <div className=\"card-body\">\n                {subElements}\n            </div>\n        </div>\n    </div>\n}","import React from 'react';\nimport {ColorPropertyComponent} from \"./ColorPropertyComponent\";\nimport {connect} from \"react-redux\";\nimport {renderAccordionElement} from \"../helper/renderer\";\nimport defaultJsonOptions from \"../store/defaultJsonOptions.js\";\n\nconst mapStateToProps = state => {\n    return {jsonOptions: state.jsonOptions};\n};\n\nconst accordionId = \"generalSettings\";\n\nclass GeneralElementsComponent extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        let jsonOptions = this.props.jsonOptions;\n\n        this.resultGroups = [];\n\n        let keys = Object.keys(jsonOptions);\n        let sortedKeys = keys.sort();\n\n\n        let count = 0;\n        for (const groupKey of sortedKeys) {\n            count++;\n            let subObject = jsonOptions[groupKey];\n            if (subObject == null) continue;\n\n            let subKeys = Object.keys(subObject);\n            const subElements = [];\n            let subCount = 0;\n            for (let propertyKey of subKeys) {\n                let defaultValue = defaultJsonOptions[groupKey][propertyKey];\n\n                let key = \"general-item\" + ++subCount;\n                subElements.push(\n                    <ColorPropertyComponent key={key}\n                                            colorId={subObject[propertyKey]}\n                                            group={groupKey}\n                                            schemaDefaultValue={defaultValue}\n                                            updateType=\"json\"\n                                            name={propertyKey}/>\n                )\n            }\n\n            this.resultGroups.push(renderAccordionElement(count, groupKey, subElements, accordionId));\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"col-3\">\n                <div className=\"accordion\" id={accordionId}>\n                    {this.resultGroups}\n                </div>\n            </div>\n        )\n    }\n}\n\nconst RGeneralElementsComponent = connect(mapStateToProps)(GeneralElementsComponent);\n\nexport {RGeneralElementsComponent as GeneralElementsComponent}\n","import React from 'react';\nimport {connect} from \"react-redux\";\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        update: nameAndValue => {\n            dispatch({update: nameAndValue, type: nameAndValue.updateType})\n        }\n    };\n}\n\nclass FontTypePropertyComponent extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.name = props.name;\n        this.title = props.title || this.name;\n        this.group = props.group;\n        this.updateType = props.updateType;\n        this.state = {\n            fontType: props.fontType,\n        };\n    }\n\n    updateValue = (e) => {\n        let value = e.target.checked;\n        console.log(\"Value: \" + value);\n        const newState = {\n            fontType: value === true ? \"1\" : undefined\n        };\n        this.fireStateUpdate(newState);\n    };\n\n    fireStateUpdate = (newState) => {\n        this.setState(newState);\n        this.props.update({\n            name: this.name,\n            fontType: newState.fontType,\n            group: this.group,\n            updateType: this.updateType\n        });\n    };\n    \n    render() {\n        return (\n            <div>\n                <label>\n                    <input type=\"checkbox\" className=\"mr-1\"\n                           checked={this.state.fontType === \"1\"}\n                           onChange={this.updateValue}/>\n                    <small className=\"text-dark\">{this.title}</small>\n\n                </label>\n            </div>\n        )\n    }\n}\n\nconst RFontTypePropertyComponent = connect(null, mapDispatchToProps)(FontTypePropertyComponent);\n\nexport {RFontTypePropertyComponent as FontTypePropertyComponent}","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {renderAccordionElement} from \"../helper/renderer\";\nimport {ColorPropertyComponent, XmlColorPropertyComponent} from \"./ColorPropertyComponent\";\nimport {FontTypePropertyComponent} from \"./FontTypePropertyComponent\";\n\nconst accordionId = \"editorSettings\";\n\nconst mapStateToProps = state => {\n    return {xmlOptions: state.xmlOptions};\n};\n\nclass EditorElementsComponent extends React.Component {\n    \n    constructor(props, context) {\n        super(props, context);\n        let xmlOptions = this.props.xmlOptions;\n\n        this.resultGroups = [];\n\n        let keys = Object.keys(xmlOptions);\n        let sortedKeys = keys.sort();\n\n        let count = 0;\n        for (const groupKey of sortedKeys) {\n            count++;\n            let subObject = xmlOptions[groupKey];\n            if (subObject == null) continue;\n\n            let elements = [];\n\n            elements.push(<XmlColorPropertyComponent key={\"editor-item1\"}\n                                                     colorId={subObject.FOREGROUND}\n                                                     group={groupKey}\n                                                     updateType=\"xml\"\n                                                     name=\"FOREGROUND\"\n                                                     title=\"Foreground\"/>);\n            elements.push(<XmlColorPropertyComponent key={\"editor-item2\"}\n                                                     colorId={subObject.BACKGROUND}\n                                                     group={groupKey}\n                                                     updateType=\"xml\"\n                                                     name=\"BACKGROUND\"\n                                                     title=\"Background\"/>);\n\n            elements.push(<FontTypePropertyComponent key={\"editor-item3\"}\n                                                     fontType={subObject.FONT_TYPE}\n                                                     group={groupKey}\n                                                     updateType=\"xml\"\n                                                     name=\"FONT_TYPE\"\n                                                     title=\"Bold\"/>);\n\n            this.resultGroups.push(renderAccordionElement(count, subObject.NAME, elements, accordionId));\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"col-3\">\n                <div className=\"accordion\" id={accordionId}>\n                    {this.resultGroups}\n                </div>\n            </div>\n        )\n    }\n}\n\nconst REditorElementsComponent = connect(mapStateToProps)(EditorElementsComponent);\n\nexport {REditorElementsComponent as EditorElementsComponent}\n","import JSZip from 'jszip'\nimport {saveAs} from 'file-saver';\n\nconst uuid = require('uuid/v1');\n\nconst EDITOR_SCHEMA_NAME = \"MyEditorScheme.xml\";\nconst MY_THEME_FILE = \"MyTheme.theme.json\";\n\nexport function generateZip(state, pluginName, author) {\n    const topLevelZip = new JSZip();\n    let metaInf = topLevelZip.folder(\"META-INF\");\n    generateManifestMF(metaInf);\n    generatePluginXml(metaInf, pluginName, author);\n\n    generateThemeJson(topLevelZip, state, pluginName, author);\n    let themes = topLevelZip.folder(\"themes\");\n    generateEditorScheme(themes, state, pluginName)\n\n    topLevelZip.generateAsync({type: \"blob\"})\n        .then(function (content) {\n            saveAs(content, pluginName + \".jar\");\n        });\n}\n\nfunction generateEditorScheme(themes, state, pluginName) {\n    let result = `<scheme name=\"${pluginName}\" version=\"1\" parent_scheme=\"Darcula\">\\n`;\n    result += \"<attributes>\\n\";\n\n    const xmlOptions = state.xmlOptions;\n    for (const name in xmlOptions) {\n        if (xmlOptions.hasOwnProperty(name)) {\n            result += generateAttribute(name, xmlOptions[name])\n        }\n    }\n\n    result += \"</attributes>\\n\";\n    result += \"</scheme>\";\n\n    themes.file(EDITOR_SCHEMA_NAME, result);\n}\n\nfunction generateAttribute(name, values) {\n\n    let result = `<option name=\"${name}\">\\n`;\n    result += \"<value>\\n\";\n\n    for (const key of Object.keys(values)) {\n        let value = values[key];\n        if (value != null && key !== \"NAME\") {\n            if (value.startsWith(\"#\")) {\n                value = value.substring(1);\n            }\n            result += `<option name=\"${key}\" value=\"${value}\" />\\n`;\n        }\n    }\n\n    result += \"</value>\\n\";\n    result += \"</option>\";\n\n    return result;\n}\n\n\nfunction generateThemeJson(topLevelZip, state, pluginName, author = \"Author\") {\n    const result = {};\n    result.name = pluginName;\n    result.author = author;\n    result.dark = true;\n    result.editorScheme = `/themes/${EDITOR_SCHEMA_NAME}`;\n\n    let uiOptions = {};\n    result.ui = uiOptions;\n\n    for (const name in state.jsonOptions) {\n        if (state.jsonOptions.hasOwnProperty(name) && name !== \"*\") {\n            uiOptions[name] = state.jsonOptions[name];\n        }\n    }\n\n    let s = JSON.stringify(result);\n    topLevelZip.file(MY_THEME_FILE, s);\n}\n\nfunction generateManifestMF(metaInf) {\n    metaInf.file(\"MANIFEST.MF\", \"Manifest-Version: 1.0\\n\" +\n        \"Created-By: Your Great Theme\\n\");\n}\n\nfunction generatePluginXml(metaInf, pluginName, author = \"Author\", pluginId = \"great.theme\", description = \"Generated plugin\") {\n    let uuidValue = uuid();\n\n    const content = `<idea-plugin>\n  <id>${pluginId}</id>\n  <name>${pluginName}</name>\n  <version>1.0</version>\n  <vendor>${author}</vendor>\n\n  <description><![CDATA[\n  ${description}\n    ]]></description>\n\n  <idea-version since-build=\"192.0\"/>\n  <depends>com.intellij.modules.lang</depends>\n  <extensions defaultExtensionNs=\"com.intellij\">\n    <themeProvider id=\"${uuidValue}\" path=\"/${MY_THEME_FILE}\"/>\n  </extensions>\n\n</idea-plugin>`;\n    metaInf.file(\"plugin.xml\", content);\n}","import React from 'react';\nimport store from '../store/store';\nimport {generateZip} from \"../helper/generateZip\";\n\nclass CreatePluginComponent extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            pluginName: \"Your great theme\"\n        }\n    };\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        let state = store.getState();\n        generateZip(state, this.state.pluginName);\n    };\n\n    pluginName = (e) => {\n        this.setState({\n            pluginName: e.target.value\n        })\n    };\n\n    render() {\n        return <div className=\"col-12\">\n            <form>\n                <div className=\"form-group\">\n                    <label htmlFor=\"pluginName\">Plugin name</label>\n                    <input type=\"text\" className=\"form-control w-25\" id=\"pluginName\" onChange={this.pluginName}\n                           value={this.state.pluginName}/>\n                </div>\n\n                <button className=\"btn btn-warning\" onClick={this.onSubmit}>Generate plugin</button>\n            </form>\n        </div>;\n    }\n}\n\n\nexport {CreatePluginComponent}\n","import React from 'react';\nimport './App.css';\nimport {IdeComponent} from \"./IdeComponent\";\nimport {GeneralElementsComponent} from \"./GeneralElementsComponent\";\n\nimport Tab from \"react-bootstrap/Tab\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport {EditorElementsComponent} from \"./EditorElementsComponent\";\nimport {CreatePluginComponent} from \"./CreatePluginComponent\";\n\n\nfunction App() {\n    return (<>\n            <div className=\"container container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col header\">\n                        <a href=\"#\" className=\"logo\"/>\n                        <h1>Your Great Theme</h1>\n                    </div>\n                </div>\n            </div>\n            <div className=\"main\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <Tabs defaultActiveKey=\"general\" id=\"uncontrolled-tab-example\">\n                            <Tab eventKey=\"general\" title=\"General\">\n                                <div className=\"row\">\n                                    <GeneralElementsComponent/>\n                                    <IdeComponent/>\n                                </div>\n                            </Tab>\n                            <Tab eventKey=\"editor\" title=\"Editor\">\n                                <div className=\"row \">\n                                    <EditorElementsComponent/>\n                                    <IdeComponent/>\n                                </div>\n                            </Tab>\n                            <Tab eventKey=\"create-plugin\" title=\"Create plugin\">\n                                <div className=\"row \">\n                                    <CreatePluginComponent/>\n                                </div>\n                            </Tab>\n                        </Tabs>\n                    </div>\n                </div>\n                <div className=\"container\">\n                    <div className=\"row my-3 text-center\">\n                        <div className=\"col\">\n                            <small className=\"text-light\">© JetBrains Hackathon 2019</small>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"clearfix\"></div>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport 'open-iconic/font/css/open-iconic-bootstrap.css';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport store from \"./store/store\";\n\n\nReactDOM.render(<Provider store={store}><App/> </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}