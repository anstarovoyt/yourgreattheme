{"version":3,"sources":["store/defaultJsonOptions.js","store/defaultEditorOptions.js","store/store.js","canvasRenderer.js","components/ColorPropertyComponent.js","components/CanvasComponent.js","helper/textTemplate.js","components/EditorTextComponent.js","components/IdeComponent.js","helper/renderer.js","components/GeneralElementsComponent.js","components/FontTypePropertyComponent.js","components/EditorElementsComponent.js","helper/generateZip.js","components/CreatePluginComponent.js","components/App.js","serviceWorker.js","index.js"],"names":["formattedOptions","k","defaultOptions","hasOwnProperty","getFlattenProperties","obj","prefix","result","key","value","flattenProperties","Object","assign","keys","starProperties","length","freezeRecursively","freeze","defaultEditorOptions","TEXT","FOREGROUND","BACKGROUND","NAME","DEFAULT_KEYWORD","DEFAULT_STRING","DEFAULT_LINE_COMMENT","shadowCopy","state","createStore","jsonOptions","defaultJsonOptions","xmlOptions","loading","action","update","type","parse","JSON","stringify","newOptions","group","name","console","log","fontType","LAYERS_ORDER","defaultState","sort","a","b","aIsForeground","toLowerCase","includes","bIsForeground","updateColor","prevColor","newColor","newAlpha","Math","min","CanvasRenderer","width","height","this","loaded","masks","offscreenCanvas","OffscreenCanvas","img","Image","addEventListener","context","getContext","drawImage","data","getImageData","imageArray","Uint8ClampedArray","x","y","i","updateStateIfPossible","src","layerCanvas","frontLayer","store","dispatch","reverse","mask","ctx","indexOfFirstDot","indexOf","color","substr","i4","parseInt","imgData","ImageData","createImageBitmap","then","imgBitmap","mapDispatchToProps","nameAndValue","updateType","popover","position","zIndex","cover","top","right","bottom","left","keyToColorPropertyComponent","ColorPropertyComponent","props","updateValue","e","preventDefault","target","newState","fireStateUpdate","setState","setTimeout","handleClick","displayColorPicker","handlePickerChange","hex","toUpperCase","substring","handleClose","resetOption","schemaDefaultValue","colorId","title","picker","style","onMouseUp","onChangeComplete","className","onClick","onChange","href","React","Component","RColorPropertyComponent","connect","RXmlColorPropertyComponent","CanvasComponent","property","canvasRenderer","getResponsibleProperty","nativeEvent","offsetX","offsetY","colorPropertyComponent","focusInput","window","alert","containerWidth","containerHeight","updateCanvas","canvas","refs","render","ref","RCanvasComponent","getTextStyle","editorOptions","option","styles","FONT_TYPE","EditorTextComponent","template","defaultTextBackground","getBackgroundColor","keywordStyle","lineComment","defaultText","stringLiteral","textTemplate","dangerouslySetInnerHTML","__html","REditorTextComponent","IdeComponent","RIdeComponent","renderAccordionElement","uniqueId","groupName","subElements","accordionId","id","data-toggle","data-target","aria-expanded","aria-controls","aria-labelledby","data-parent","GeneralElementsComponent","resultGroups","sortedKeys","count","groupKey","subObject","subKeys","subCount","propertyKey","defaultValue","push","RGeneralElementsComponent","FontTypePropertyComponent","checked","undefined","RFontTypePropertyComponent","EditorElementsComponent","elements","REditorElementsComponent","uuid","require","EDITOR_SCHEMA_NAME","MY_THEME_FILE","generateZip","pluginName","author","topLevelZip","JSZip","metaInf","folder","file","generateManifestMF","pluginId","description","uuidValue","content","generatePluginXml","dark","editorScheme","uiOptions","ui","s","generateThemeJson","themes","generateAttribute","generateEditorScheme","generateAsync","saveAs","values","startsWith","CreatePluginComponent","onSubmit","getState","htmlFor","App","defaultActiveKey","eventKey","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4c22d7f.chunk.js","sourcesContent":["import defaultOptions from '../data/darcula-default-meaningful.json'\nimport starProperties from '../data/starProperties.json'\n\nconst formattedOptions = {};\nfor (let k in defaultOptions) {\n    if (defaultOptions.hasOwnProperty(k)) {\n        formattedOptions[k] = getFlattenProperties(defaultOptions[k], \"\");\n    }\n}\n\nif (Object.keys(starProperties).length > 0) {\n    formattedOptions[\"*\"] = getFlattenProperties(starProperties, \"\");\n}\n\nexport function getFlattenProperties(obj, prefix) {\n    let result = {};\n    if (prefix) prefix = prefix + \".\";\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key)) continue;\n\n        let value = obj[key];\n        if (typeof value !== \"object\") {\n            result[prefix + key] = value;\n            continue;\n        }\n\n        let flattenProperties = getFlattenProperties(value, prefix + key);\n        result = Object.assign(result, flattenProperties);\n    }\n\n    return result;\n}\n\nfunction freezeRecursively(obj) {\n    Object.freeze(obj);\n    for (let k in obj) {\n        if (typeof obj == \"object\" && obj.hasOwnProperty(k)) {\n            freezeRecursively(obj[k]);\n        }\n    }\n}\n\nfreezeRecursively(formattedOptions);\n\nexport default formattedOptions;\n","const defaultEditorOptions = {\n    TEXT: {\n        FOREGROUND: \"#a9b7c6\",\n        BACKGROUND: \"#2b2b2b\",\n        NAME: \"Text\"\n    },\n    DEFAULT_KEYWORD: {\n        FOREGROUND: \"#cc7832\",\n        NAME: \"Keywords\"\n    },\n    DEFAULT_STRING: {\n        FOREGROUND: \"#6a8759\",\n        NAME: \"String literals\"\n    },\n    DEFAULT_LINE_COMMENT: {\n        FOREGROUND: \"#808080\",\n        NAME: \"Line comment\"\n    }\n};\n//test\n\nexport default defaultEditorOptions;","import {createStore} from 'redux'\nimport defaultJsonOptions from \"./defaultJsonOptions\";\nimport defaultEditorOptions from \"./defaultEditorOptions\";\n\nfunction updateProperty(state = {\n    jsonOptions: defaultJsonOptions,\n    xmlOptions: defaultEditorOptions,\n    loading: true\n}, action) {\n    let update = action.update;\n\n    if (action.type === \"reload\") {\n        let parse = JSON.parse(JSON.stringify(state));\n        parse.loading = false;\n        return parse;\n    }\n\n    if (action.type === \"json\") {\n        if (update && update.value.length <= 6) {\n            const newOptions = shadowCopy(state.jsonOptions);\n            newOptions[update.group][update.name] = \"#\" + update.value;\n            return {jsonOptions: newOptions, xmlOptions: state.xmlOptions, loading: state.loading}\n        }\n    } else if (action.type === \"xml\") {\n        if (update) {\n            if (update.value && update.value.length === 6) {\n                const newOptions = shadowCopy(state.xmlOptions);\n                newOptions[update.group][update.name] = \"#\" + update.value;\n                console.log(\"state updated \" + update.name + \" \" + update.value);\n                return {xmlOptions: newOptions, jsonOptions: state.jsonOptions, loading: state.loading}\n            } else if (update.name === \"FONT_TYPE\") {\n                const newOptions = shadowCopy(state.xmlOptions);\n                newOptions[update.group][update.name] = update.fontType;\n                return {xmlOptions: newOptions, jsonOptions: state.jsonOptions, loading: state.loading}\n            }\n        }\n    }\n    return state;\n}\n\n\nfunction shadowCopy(state) {\n    let result = {};\n    return Object.assign(result, state);\n}\n\n\nexport default createStore(updateProperty);\n","import defaultState, {getFlattenProperties} from \"./store/defaultJsonOptions\";\nimport store from \"./store/store\";\n\nconst LAYERS_ORDER = Object.keys(getFlattenProperties(defaultState, \"\")).sort((a, b) => {\n    let aIsForeground = a.toLowerCase().includes(\"foreground\");\n    let bIsForeground = b.toLowerCase().includes(\"foreground\");\n    if (aIsForeground && !bIsForeground) return 1;\n    if (!aIsForeground && bIsForeground) return -1;\n    return a < b ? -1 :\n           a > b ? 1 :\n           0;\n});\n\nfunction updateColor(prevColor, newColor, newAlpha) {\n    if (newAlpha === 255) return newColor;\n    return Math.min((prevColor * (255 - newAlpha) + newColor * newAlpha) / 255, 255);\n}\n\n\nclass CanvasRenderer {\n\n    constructor(width, height) {\n        this.width = width;\n        this.height = height;\n        this.loaded = 1;\n\n        const masks = {};\n        for (let key of LAYERS_ORDER) {\n            this.loaded++;\n            let offscreenCanvas = new OffscreenCanvas(width, height);\n            let img = new Image();\n            img.addEventListener(\"load\", () => {\n                let context = offscreenCanvas.getContext(\"2d\");\n                context.drawImage(img, 0, 0);\n                let data = context.getImageData(0, 0, width, height).data;\n                let imageArray = new Uint8ClampedArray(this.width * this.height);\n                for (let x = 0; x < this.width; x++) {\n                    for (let y = 0; y < this.height; y++) {\n                        let i = y * this.width + x;\n                        imageArray[i] = 255 - data[i * 4];\n                    }\n                }\n                masks[key] = imageArray;\n                this.updateStateIfPossible();\n            }, false);\n            img.src = 'canvas-data/' + key + \".png\";\n        }\n        /** @type {Object<String, Uint8ClampedArray>} */\n        this.layerCanvas = masks;\n\n        let frontLayer = new Image();\n        frontLayer.addEventListener(\"load\", () => {\n            this.frontLayer = frontLayer;\n            this.updateStateIfPossible();\n        }, false);\n        frontLayer.src = 'canvas-data/FrontLayer.png';\n    }\n\n    updateStateIfPossible() {\n        this.loaded--;\n        if (this.loaded === 0) {\n            store.dispatch({type: \"reload\"})\n        }\n    }\n\n    getResponsibleProperty(x, y) {\n        let i = y * this.width + x;\n        for (let key of LAYERS_ORDER.reverse()) {\n            let mask = this.layerCanvas[key];\n            if (mask && mask[i] > 0) return key;\n        }\n    }\n\n    /**\n     * @param {CanvasRenderingContext2D} ctx\n     * @param state\n     */\n    render(ctx, state) {\n        let imageArray = new Uint8ClampedArray(this.width * this.height * 4);\n\n        for (let key of LAYERS_ORDER) {\n            let mask = this.layerCanvas[key];\n            if (!mask) continue;\n\n            let indexOfFirstDot = key.indexOf(\".\");\n            let color = state[key.substr(0, indexOfFirstDot)][key.substr(indexOfFirstDot + 1)];\n\n            for (let x = 0; x < this.width; x++) {\n                for (let y = 0; y < this.height; y++) {\n                    let i = y * this.width + x;\n                    if (mask[i] > 0) {\n                        let i4 = i * 4;\n                        imageArray[i4] = updateColor(imageArray[i4], parseInt(color.substr(1, 2), 16), mask[i]);\n                        imageArray[i4 + 1] = updateColor(imageArray[i4 + 1], parseInt(color.substr(3, 2), 16), mask[i]);\n                        imageArray[i4 + 2] = updateColor(imageArray[i4 + 2], parseInt(color.substr(5, 2), 16), mask[i]);\n                        imageArray[i4 + 3] = 255;\n                    }\n                }\n            }\n        }\n\n        let imgData = new ImageData(imageArray, this.width, this.height);\n\n        createImageBitmap(imgData).then(imgBitmap => {\n            ctx.drawImage(imgBitmap, 0, 0);\n            if (this.frontLayer) {\n                ctx.drawImage(this.frontLayer, 0, 0);\n            }\n        });\n    }\n}\n\n\nfunction getProperty(state, property) {\n    let split = property.split(\".\");\n    let optionsProperty = getValueBySplitQName(state, split);\n    let defaultProperty = getValueBySplitQName(defaultState, split);\n    if (optionsProperty !== defaultProperty) return optionsProperty;\n\n    let optionsStarProperty = state[\"*\"][split[split.length - 1]];\n    if (optionsStarProperty) return optionsStarProperty;\n\n    return defaultProperty;\n}\n\nfunction getValueBySplitQName(options, split) {\n    let value = options;\n    for (let part of split) {\n        value = value[part];\n    }\n    return value;\n}\n\nexport default CanvasRenderer;\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {ChromePicker} from 'react-color'\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        update: nameAndValue => {\n            dispatch({update: nameAndValue, type: nameAndValue.updateType})\n        }\n    };\n}\n\nconst mapJsonStateToProps = state => {\n    return {xmlOptions: state.xmlOptions};\n};\n\nconst mapXmlStateToProps = state => {\n    return {jsonOptions: state.jsonOptions};\n};\n\nconst popover = {\n    position: 'absolute',\n    zIndex: '1000',\n};\nconst cover = {\n    position: 'fixed',\n    top: '0px',\n    right: '0px',\n    bottom: '0px',\n    left: '0px',\n};\n\n\nexport const keyToColorPropertyComponent = {};\n\nclass ColorPropertyComponent extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.colorId = props.colorId;\n        this.name = props.name;\n        this.schemaDefaultValue = props.schemaDefaultValue == null ? null : props.schemaDefaultValue.substring(1);\n        this.title = props.title || this.name;\n        this.group = props.group;\n        this.updateType = props.updateType;\n        let value = typeof props.colorId == \"string\" ? props.colorId.substring(1) : \"\";\n        this.state = {\n            value: value\n        };\n        keyToColorPropertyComponent[this.group + \".\" + this.name] = this;\n    }\n\n    updateValue = (e) => {\n        e.preventDefault();\n        let value = e.target.value;\n        if (value !== this.state.value) {\n            const newState = {\n                value: value\n            };\n            this.fireStateUpdate(newState);\n        }\n    };\n\n    fireStateUpdate = (newState) => {\n        this.setState(newState);\n        \n        //send latter, for avoiding blocking UI / Updates\n        setTimeout(() => {\n            this.props.update({\n                name: this.name,\n                value: newState.value,\n                group: this.group,\n                updateType: this.updateType\n            });\n        })\n\n    };\n\n    handleClick = () => {\n        const newState = {\n            value: this.state.value,\n            displayColorPicker: true\n        };\n        this.setState(newState);\n    };\n\n    handlePickerChange = (color) => {\n        if (color.hex == null) return;\n        let value = color.hex.toUpperCase().substring(1);\n        const newState = {\n            value: value\n        };\n\n        this.fireStateUpdate(newState, false);\n    };\n\n    handleClose = () => {\n        const newState = {\n            value: this.state.value,\n            displayColorPicker: false\n        };\n        this.fireStateUpdate(newState, false);\n    };\n\n    resetOption = () => {\n        const newState = {\n            value: this.schemaDefaultValue\n        };\n        this.fireStateUpdate(newState);\n    }\n\n    focusInput() {\n\n    }\n\n    render() {\n        let value = \"#\" + this.state.value;\n\n        let picker = this.state.displayColorPicker\n            ? <div style={popover}>\n                <div onMouseUp={this.handleClose} style={cover}/>\n                <ChromePicker\n                    color={value}\n                    // onChange={this.handleChange}\n                    onChangeComplete={this.handlePickerChange}\n                />\n            </div>\n            : null;\n\n        let style = {\"backgroundColor\": value, \"borderColor\": value};\n        return (\n            <div>\n                <small className=\"form-text text-dark\">{this.title}</small>\n                <div className=\"input-group color-picker\">\n                    <div className=\"input-group-prepend\">\n                        <button onClick={this.handleClick} className=\"btn\" type=\"button\"\n                                style={style}>\n                            {picker}\n                        </button>\n                    </div>\n\n                    <input type=\"text\" className=\"form-control form-control-sm color-property\"\n                           value={this.state.value}\n                           onChange={this.updateValue}/>\n                    {this.schemaDefaultValue == null || (this.state.value === this.schemaDefaultValue) ? null : <a onClick={this.resetOption} href=\"#\"><small>revert</small></a>}\n\n                </div>\n            </div>\n        )\n    }\n}\n\nconst RColorPropertyComponent = connect(mapJsonStateToProps, mapDispatchToProps)(ColorPropertyComponent);\nconst RXmlColorPropertyComponent = connect(mapXmlStateToProps, mapDispatchToProps)(ColorPropertyComponent);\n\nexport {RColorPropertyComponent as ColorPropertyComponent, RXmlColorPropertyComponent as XmlColorPropertyComponent}\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport CanvasRenderer from \"../canvasRenderer\";\nimport {keyToColorPropertyComponent} from \"./ColorPropertyComponent\";\n\n\nconst mapStateToProps = state => {\n    return {jsonOptions: state.jsonOptions};\n};\n\nclass CanvasComponent extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.containerWidth = 973;\n        this.containerHeight = 623;\n        this.canvasRenderer = new CanvasRenderer(this.containerWidth * 2, this.containerHeight * 2)\n    }\n\n    componentDidMount() {\n        this.updateCanvas();\n    }\n\n    componentDidUpdate() {\n        this.updateCanvas();\n    }\n\n    updateCanvas() {\n        let canvas = this.refs.canvas;\n        canvas.style.width = this.containerWidth + \"px\";\n        canvas.style.height = this.containerHeight + \"px\";\n        const ctx = canvas.getContext('2d');\n        this.canvasRenderer.render(ctx, this.props.jsonOptions);\n    }\n\n    handleClick = (e) => {\n        let property = this.canvasRenderer.getResponsibleProperty(e.nativeEvent.offsetX * 2, e.nativeEvent.offsetY * 2);\n        if (!property) return;\n        let colorPropertyComponent = keyToColorPropertyComponent[property];\n        if (!colorPropertyComponent) return;\n        colorPropertyComponent.focusInput();\n        window.alert(property);\n    };\n\n    render() {\n        return (<div className=\"canvas-area\">\n            <canvas className=\"canvas-ide-component\" width={this.containerWidth * 2} height={this.containerHeight * 2}\n                    ref=\"canvas\" onClick={this.handleClick}/>\n        </div>);\n    }\n}\n\n\nconst RCanvasComponent = connect(mapStateToProps)(CanvasComponent);\n\nexport {RCanvasComponent as CanvasComponent}\n","import React from 'react'\n\nexport default function (editorOptions) {\n    \n    const defaultTextBackground = `background-color: ${getBackgroundColor(editorOptions)}; font-family:'Menlo Regular';font-weight:normal;font-size:14px;line-height:1.5;`;\n    const keywordStyle = getTextStyle(editorOptions, \"DEFAULT_KEYWORD\");\n    const lineComment = getTextStyle(editorOptions, \"DEFAULT_LINE_COMMENT\");\n    const defaultText = getTextStyle(editorOptions, \"TEXT\");\n    const stringLiteral = getTextStyle(editorOptions, \"DEFAULT_STRING\");\n    return `\n<div id=\"editor\" style=\"${defaultTextBackground}\">\n<pre><span style=\"${keywordStyle}\">package </span><span style=\"${defaultText}\">com.company</span><span class=\"s0\">;</span>\n<span style=\"${keywordStyle}\">public class </span><span style=\"${defaultText}\">Main {</span>\n        <span style=\"${keywordStyle}\">public static void </span><span style=\"${defaultText}\">main(String[] args) {</span>\n            <span style=\"${lineComment}\">// write your code here</span>\n            <span style=\"${defaultText}\">System.out.println(</span><span style=\"${stringLiteral}\">&quot;Hello&quot;</span><span\n        style=\"${defaultText}\">)</span><span style=\"${keywordStyle}\">;</span>\n        <span style=\"${defaultText}\">}</span>\n<span style=\"${defaultText}\">}</span>\n</pre>\n</div>`\n}\n\nfunction getBackgroundColor(editorOptions) {\n    return editorOptions.TEXT.BACKGROUND || \"#000000\";\n}\n\nfunction getTextStyle(editorOptions, option) {\n    let styles = editorOptions[option];\n\n    let result = `color:${styles.FOREGROUND || \"#FFFFFF\"};`;\n    if (styles.FONT_TYPE != null) {\n        if (styles.FONT_TYPE === \"1\") {\n            result += \"font-weight: bold;\"\n        }\n    }\n    if (styles.BACKGROUND) {\n        result += `background-color: ${styles.BACKGROUND};`\n    }\n    return result;\n}","import React from 'react';\nimport {connect} from \"react-redux\";\nimport textTemplate from \"../helper/textTemplate\";\n\n\nconst mapStateToProps = state => {\n    return {xmlOptions: state.xmlOptions};\n};\n\nclass EditorTextComponent extends React.Component {\n\n    render() {\n        let template = textTemplate(this.props.xmlOptions);\n\n        return <div dangerouslySetInnerHTML={{__html: template}}/>;\n    }\n}\n\n\nconst REditorTextComponent = connect(mapStateToProps)(EditorTextComponent);\n\nexport {REditorTextComponent as EditorTextComponent}","import React from 'react';\nimport {CanvasComponent} from \"./CanvasComponent\";\nimport {EditorTextComponent} from \"./EditorTextComponent\";\nimport {connect} from \"react-redux\";\n\nconst mapStateToProps = state => {\n    return {loading: state.loading};\n};\n\nclass IdeComponent extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n    }\n\n    render() {\n        return (<div className={\"col-9 canvas-container\" + (this.props.loading ? \" loading\" : \"\")}>\n            <EditorTextComponent/>\n            <CanvasComponent/>\n        </div>);\n    }\n}\n\nconst RIdeComponent = connect(mapStateToProps)(IdeComponent);\n\nexport {RIdeComponent as IdeComponent}\n","import React from \"react\";\n\nexport function renderAccordionElement(uniqueId, groupName, subElements, accordionId) {\n    return <div key={\"group\" + accordionId + uniqueId} className=\"card\">\n        <div className=\"card-header\" id={\"heading\" + accordionId + uniqueId}>\n            <button className=\"btn btn-block text-left collapsed\" data-toggle=\"collapse\"\n                    data-target={\"#collapse\" + accordionId + uniqueId}\n                    aria-expanded=\"false\" aria-controls={\"collapse\" + accordionId + uniqueId}>\n                {groupName}\n                <span className=\"oi oi-chevron-bottom float-right\"/>\n            </button>\n        </div>\n\n        <div id={\"collapse\" + accordionId + uniqueId}\n             className=\"collapse\" aria-labelledby={\"heading\" + accordionId + uniqueId}\n             data-parent={\"#\" + accordionId}>\n            <div className=\"card-body\">\n                {subElements}\n            </div>\n        </div>\n    </div>\n}","import React from 'react';\nimport {ColorPropertyComponent} from \"./ColorPropertyComponent\";\nimport {connect} from \"react-redux\";\nimport {renderAccordionElement} from \"../helper/renderer\";\nimport defaultJsonOptions from \"../store/defaultJsonOptions.js\";\n\nconst mapStateToProps = state => {\n    return {jsonOptions: state.jsonOptions};\n};\n\nconst accordionId = \"generalSettings\";\n\nclass GeneralElementsComponent extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        let jsonOptions = this.props.jsonOptions;\n\n        this.resultGroups = [];\n\n        let keys = Object.keys(jsonOptions);\n        let sortedKeys = keys.sort();\n\n\n        let count = 0;\n        for (const groupKey of sortedKeys) {\n            count++;\n            let subObject = jsonOptions[groupKey];\n            if (subObject == null) continue;\n\n            let subKeys = Object.keys(subObject);\n            const subElements = [];\n            let subCount = 0;\n            for (let propertyKey of subKeys) {\n                let defaultValue = defaultJsonOptions[groupKey][propertyKey];\n\n                let key = \"general-item\" + ++subCount;\n                subElements.push(\n                    <ColorPropertyComponent key={key}\n                                            colorId={subObject[propertyKey]}\n                                            group={groupKey}\n                                            schemaDefaultValue={defaultValue}\n                                            updateType=\"json\"\n                                            name={propertyKey}/>\n                )\n            }\n\n            this.resultGroups.push(renderAccordionElement(count, groupKey, subElements, accordionId));\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"col-3\">\n                <div className=\"accordion\" id={accordionId}>\n                    {this.resultGroups}\n                </div>\n            </div>\n        )\n    }\n}\n\nconst RGeneralElementsComponent = connect(mapStateToProps)(GeneralElementsComponent);\n\nexport {RGeneralElementsComponent as GeneralElementsComponent}\n","import React from 'react';\nimport {connect} from \"react-redux\";\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        update: nameAndValue => {\n            dispatch({update: nameAndValue, type: nameAndValue.updateType})\n        }\n    };\n}\n\nclass FontTypePropertyComponent extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.name = props.name;\n        this.title = props.title || this.name;\n        this.group = props.group;\n        this.updateType = props.updateType;\n        this.state = {\n            fontType: props.fontType,\n        };\n    }\n\n    updateValue = (e) => {\n        let value = e.target.checked;\n        console.log(\"Value: \" + value);\n        const newState = {\n            fontType: value === true ? \"1\" : undefined\n        };\n        this.fireStateUpdate(newState);\n    };\n\n    fireStateUpdate = (newState) => {\n        this.setState(newState);\n        this.props.update({\n            name: this.name,\n            fontType: newState.fontType,\n            group: this.group,\n            updateType: this.updateType\n        });\n    };\n    \n    render() {\n        return (\n            <div>\n                <label>\n                    <input type=\"checkbox\" className=\"mr-1\"\n                           checked={this.state.fontType === \"1\"}\n                           onChange={this.updateValue}/>\n                    <small className=\"text-dark\">{this.title}</small>\n\n                </label>\n            </div>\n        )\n    }\n}\n\nconst RFontTypePropertyComponent = connect(null, mapDispatchToProps)(FontTypePropertyComponent);\n\nexport {RFontTypePropertyComponent as FontTypePropertyComponent}","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {renderAccordionElement} from \"../helper/renderer\";\nimport {ColorPropertyComponent, XmlColorPropertyComponent} from \"./ColorPropertyComponent\";\nimport {FontTypePropertyComponent} from \"./FontTypePropertyComponent\";\nimport defaultEditorOptions from \"../store/defaultEditorOptions\";\n\nconst accordionId = \"editorSettings\";\n\nconst mapStateToProps = state => {\n    return {xmlOptions: state.xmlOptions};\n};\n\nclass EditorElementsComponent extends React.Component {\n    \n    constructor(props, context) {\n        super(props, context);\n        let xmlOptions = this.props.xmlOptions;\n\n        this.resultGroups = [];\n\n        let keys = Object.keys(xmlOptions);\n        let sortedKeys = keys.sort();\n\n        \n        let count = 0;\n        for (const groupKey of sortedKeys) {\n            count++;\n            let subObject = xmlOptions[groupKey];\n            if (subObject == null) continue;\n\n            let elements = [];\n\n            \n            elements.push(<XmlColorPropertyComponent key={\"editor-item1\"}\n                                                     colorId={subObject.FOREGROUND}\n                                                     group={groupKey}\n                                                     schemaDefaultValue={defaultEditorOptions[groupKey][\"FOREGROUND\"]}\n                                                     updateType=\"xml\"\n                                                     name=\"FOREGROUND\"\n                                                     title=\"Foreground\"/>);\n            elements.push(<XmlColorPropertyComponent key={\"editor-item2\"}\n                                                     colorId={subObject.BACKGROUND}\n                                                     group={groupKey}\n                                                     updateType=\"xml\"\n                                                     name=\"BACKGROUND\"\n                                                     schemaDefaultValue={defaultEditorOptions[groupKey][\"BACKGROUND\"]}\n                                                     title=\"Background\"/>);\n\n            elements.push(<FontTypePropertyComponent key={\"editor-item3\"}\n                                                     fontType={subObject.FONT_TYPE}\n                                                     group={groupKey}\n                                                     updateType=\"xml\"\n                                                     name=\"FONT_TYPE\"\n                                                     title=\"Bold\"/>);\n\n            this.resultGroups.push(renderAccordionElement(count, subObject.NAME, elements, accordionId));\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"col-3\">\n                <div className=\"accordion\" id={accordionId}>\n                    {this.resultGroups}\n                </div>\n            </div>\n        )\n    }\n}\n\nconst REditorElementsComponent = connect(mapStateToProps)(EditorElementsComponent);\n\nexport {REditorElementsComponent as EditorElementsComponent}\n","import JSZip from 'jszip'\nimport {saveAs} from 'file-saver';\n\nconst uuid = require('uuid/v1');\n\nconst EDITOR_SCHEMA_NAME = \"MyEditorScheme.xml\";\nconst MY_THEME_FILE = \"MyTheme.theme.json\";\n\nexport function generateZip(state, pluginName, author) {\n    const topLevelZip = new JSZip();\n    let metaInf = topLevelZip.folder(\"META-INF\");\n    generateManifestMF(metaInf);\n    generatePluginXml(metaInf, pluginName, author);\n\n    generateThemeJson(topLevelZip, state, pluginName, author);\n    let themes = topLevelZip.folder(\"themes\");\n    generateEditorScheme(themes, state, pluginName)\n\n    topLevelZip.generateAsync({type: \"blob\"})\n        .then(function (content) {\n            saveAs(content, pluginName + \".jar\");\n        });\n}\n\nfunction generateEditorScheme(themes, state, pluginName) {\n    let result = `<scheme name=\"${pluginName}\" version=\"1\" parent_scheme=\"Darcula\">\\n`;\n    result += \"<attributes>\\n\";\n\n    const xmlOptions = state.xmlOptions;\n    for (const name in xmlOptions) {\n        if (xmlOptions.hasOwnProperty(name)) {\n            result += generateAttribute(name, xmlOptions[name])\n        }\n    }\n\n    result += \"</attributes>\\n\";\n    result += \"</scheme>\";\n\n    themes.file(EDITOR_SCHEMA_NAME, result);\n}\n\nfunction generateAttribute(name, values) {\n\n    let result = `<option name=\"${name}\">\\n`;\n    result += \"<value>\\n\";\n\n    for (const key of Object.keys(values)) {\n        let value = values[key];\n        if (value != null && key !== \"NAME\") {\n            if (value.startsWith(\"#\")) {\n                value = value.substring(1);\n            }\n            result += `<option name=\"${key}\" value=\"${value}\" />\\n`;\n        }\n    }\n\n    result += \"</value>\\n\";\n    result += \"</option>\";\n\n    return result;\n}\n\n\nfunction generateThemeJson(topLevelZip, state, pluginName, author = \"Author\") {\n    const result = {};\n    result.name = pluginName;\n    result.author = author;\n    result.dark = true;\n    result.editorScheme = `/themes/${EDITOR_SCHEMA_NAME}`;\n\n    let uiOptions = {};\n    result.ui = uiOptions;\n\n    for (const name in state.jsonOptions) {\n        if (state.jsonOptions.hasOwnProperty(name) && name !== \"*\") {\n            uiOptions[name] = state.jsonOptions[name];\n        }\n    }\n\n    let s = JSON.stringify(result);\n    topLevelZip.file(MY_THEME_FILE, s);\n}\n\nfunction generateManifestMF(metaInf) {\n    metaInf.file(\"MANIFEST.MF\", \"Manifest-Version: 1.0\\n\" +\n        \"Created-By: Your Great Theme\\n\");\n}\n\nfunction generatePluginXml(metaInf, pluginName, author = \"Author\", pluginId = \"great.theme\", description = \"Generated plugin\") {\n    let uuidValue = uuid();\n\n    const content = `<idea-plugin>\n  <id>${pluginId}</id>\n  <name>${pluginName}</name>\n  <version>1.0</version>\n  <vendor>${author}</vendor>\n\n  <description><![CDATA[\n  ${description}\n    ]]></description>\n\n  <idea-version since-build=\"192.0\"/>\n  <depends>com.intellij.modules.lang</depends>\n  <extensions defaultExtensionNs=\"com.intellij\">\n    <themeProvider id=\"${uuidValue}\" path=\"/${MY_THEME_FILE}\"/>\n  </extensions>\n\n</idea-plugin>`;\n    metaInf.file(\"plugin.xml\", content);\n}","import React from 'react';\nimport store from '../store/store';\nimport {generateZip} from \"../helper/generateZip\";\n\nclass CreatePluginComponent extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            pluginName: \"Your great theme\"\n        }\n    };\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        let state = store.getState();\n        generateZip(state, this.state.pluginName);\n    };\n\n    pluginName = (e) => {\n        this.setState({\n            pluginName: e.target.value\n        })\n    };\n\n    render() {\n        return <div className=\"col-12\">\n            <form>\n                <div className=\"form-group\">\n                    <label htmlFor=\"pluginName\">Plugin name</label>\n                    <input type=\"text\" className=\"form-control w-25\" id=\"pluginName\" onChange={this.pluginName}\n                           value={this.state.pluginName}/>\n                </div>\n\n                <button className=\"btn btn-warning\" onClick={this.onSubmit}>Generate plugin</button>\n            </form>\n        </div>;\n    }\n}\n\n\nexport {CreatePluginComponent}\n","import React from 'react';\nimport './App.css';\nimport {IdeComponent} from \"./IdeComponent\";\nimport {GeneralElementsComponent} from \"./GeneralElementsComponent\";\n\nimport Tab from \"react-bootstrap/Tab\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport {EditorElementsComponent} from \"./EditorElementsComponent\";\nimport {CreatePluginComponent} from \"./CreatePluginComponent\";\n\n\nfunction App() {\n    return (<>\n            <div className=\"container container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col header\">\n                        <a href=\"#\" className=\"logo\"/>\n                        <h1>Your Great Theme</h1>\n                    </div>\n                </div>\n            </div>\n            <div className=\"main\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <Tabs defaultActiveKey=\"general\" id=\"uncontrolled-tab-example\">\n                            <Tab eventKey=\"general\" title=\"General\">\n                                <div className=\"row\">\n                                    <GeneralElementsComponent/>\n                                    <IdeComponent/>\n                                </div>\n                            </Tab>\n                            <Tab eventKey=\"editor\" title=\"Editor\">\n                                <div className=\"row \">\n                                    <EditorElementsComponent/>\n                                    <IdeComponent/>\n                                </div>\n                            </Tab>\n                            <Tab eventKey=\"create-plugin\" title=\"Create plugin\">\n                                <div className=\"row \">\n                                    <CreatePluginComponent/>\n                                </div>\n                            </Tab>\n                        </Tabs>\n                    </div>\n                </div>\n                <div className=\"container\">\n                    <div className=\"row my-3 text-center\">\n                        <div className=\"col\">\n                            <small className=\"text-light\">© JetBrains Hackathon 2019</small>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"clearfix\"></div>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport 'open-iconic/font/css/open-iconic-bootstrap.css';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport store from \"./store/store\";\n\n\nReactDOM.render(<Provider store={store}><App/> </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}